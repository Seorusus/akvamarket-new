<?php

function get_recent_nodes() {
  drupal_session_start();

  if (array_key_exists('session_recent_nodes', $_SESSION)) {
    $recent_nodes = (array)$_SESSION['session_recent_nodes'];
  }
  else {
    $recent_nodes = array();
  }
  return $recent_nodes;
}

// Limit field validator callback.
function session_recent_nodes_limit_validate($element, &$form_state) {
  $limit = (int)$element['#value'];
  if ($limit < 1) {
    form_error($element, t('Must be positive integer.'));
  };
}


// Config form.
function block_config_form() {

  // Build types options.
  $node_type_options = array();
  foreach (node_type_get_types() as $type => $object) {
      $node_type_options[$type] = $object->name;
  };

  $form['session_recent_nodes_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types'),
    '#options' => $node_type_options,
    '#default_value' => variable_get('session_recent_nodes_types', array()),
    '#description' => t('Node types for recent nodes list.'),
  );

  $form['session_recent_nodes_render'] = array(
    '#type' => 'select',
    '#title' => t('Render'),
    '#options' => array(
        'title' => t('Title'),
        'teaser' => t('Teaser'),
      ),
    '#default_value' => variable_get('session_recent_nodes_render', 'title'),
    '#description' => t('How recent nodes should be rendered.'),
  );

  $form['session_recent_nodes_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit'),
    '#default_value' => variable_get('session_recent_nodes_limit', 10),
    '#description' => t('Max records in recent nodes list.'),
    '#size' => 3,
    '#maxlength' => 3,
    '#element_validate' => array('session_recent_nodes_limit_validate'),
  );

  $form['session_recent_nodes_reset'] = array(
    '#title' => t('Reset list'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
    '#description' => t('Flush recent nodes.'),
  );

  return $form;
}


// Block info
function session_recent_nodes_block_info() {
  $blocks = array();

  $blocks[0] = array(
    'info' => t('Recent nodes'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


// Config block
function session_recent_nodes_block_configure($delta = '') {
  return block_config_form();
}


// Save callback
function session_recent_nodes_block_save($delta = '', $edit = array()) {
  variable_set('session_recent_nodes_types', $edit['session_recent_nodes_types']);
  variable_set('session_recent_nodes_limit', $edit['session_recent_nodes_limit']);
  variable_set('session_recent_nodes_render', $edit['session_recent_nodes_render']);

  // Flush array.      
  if ($edit['session_recent_nodes_reset']) {
    $_SESSION['session_recent_nodes'] = array();
  };
}


// View callback
function session_recent_nodes_block_view($delta = '') {

  $recent_nodes = get_recent_nodes();
  $recent_nodes = array_reverse($recent_nodes);

  $content = array();
  
  $render = variable_get('session_recent_nodes_render', 'title');

  switch ($render) {

    // Render as list of links.
    case 'title':
        $links = array();

        foreach ($recent_nodes as $data) {
          $class = sprintf('recent-node-%d', $data['nid']);
          $links[$class] = array(
            'title' => $data['title'],
            'href' => $data['path'],
          );
        };

        $content = theme('links', array('links' => $links));
        break;

    // Render as teasers.
    case 'teaser':
        foreach ($recent_nodes as $data) {
          $content[] = node_view(node_load($data['nid']), 'rss');
        };
        break;
  };

  return array(
      'subject' => t('Recent nodes'),
      'content' => $content,
  );
}


// Node view callback.
function session_recent_nodes_node_view($node, $view_mode, $langcode) {

  // Process node in full view only.
  if ($view_mode != 'full') {
    return;
  };

  $node_types = variable_get('session_recent_nodes_types', array());  
  $type = $node->type;

  if (array_key_exists($type, $node_types)) {
    if ($node_types[$type]) {
      $recent_nodes = get_recent_nodes();

      // Check for node exists in array.
      foreach ($recent_nodes as $data) {
        if ($data['nid'] == $node->nid) {
          return;
        };
      };

      $data = array(
        'nid' => $node->nid,
        'title' => $node->title,
        'path' => request_path(),
      );

      $recent_nodes[] = $data;

      $limit = (int)variable_get('session_recent_nodes_limit', 10);
      $recent_nodes = array_slice($recent_nodes, -$limit);
    
      $_SESSION['session_recent_nodes'] = $recent_nodes;
    };
  };
}
